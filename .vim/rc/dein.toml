[[plugins]]
repo = 'morhetz/gruvbox'
hook_add = '''
  colorscheme gruvbox
  set background=dark
  set t_Co=256
  let g:ligthline = { 'colorscheme': 'gruvbox' }
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  let NERDTreeShowHidden = 1
  let g:NERDTreeWinSize = 28
  nnoremap <silent><C-e> :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
on_i = 1
merged = '0'
hook_add = '''
  set updatetime=100
  let g:coc_global_extensions = [
      \'coc-css',
      \'coc-eslint',
      \'coc-go',
      \'coc-html',
      \'coc-java',
      \'coc-json',
      \'coc-pairs',
      \'coc-phpls',
      \'coc-pyright',
      \'coc-tsserver',
      \'coc-pretty-ts-errors',
      \'coc-prettier',
      \'coc-yaml',
      \'coc-highlight'
      \]

  " Don't pass messages to |ins-completion-menu|.
  set shortmess+=c

  " Always show the signcolumn, otherwise it would shift the text each time
  " diagnostics appear/become resolved.
  if has("patch-8.1.1564")
    " Recently vim can merge signcolumn and number column into one
    set signcolumn=number
  else
    set signcolumn=yes
  endif

  " Use tab for trigger completion with characters ahead and navigate
  " NOTE: There's always complete item selected by default, you may want to enable
  " no select by `"suggest.noselect": true` in your configuration file
  " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
  " other plugin before putting this into your config
  inoremap <silent><expr> <TAB>
        \ coc#pum#visible() ? coc#pum#next(1) :
        \ CheckBackspace() ? "\<Tab>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

  " Make <CR> to accept selected completion item or notify coc.nvim to format
  " <C-g>u breaks current undo, please make your own choice
  inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                                \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

  function! CheckBackspace() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  " Use <c-space> to trigger completion
  if has('nvim')
    inoremap <silent><expr> <c-space> coc#refresh()
  else
    inoremap <silent><expr> <c-@> coc#refresh()
  endif

  " Use `[g` and `]g` to navigate diagnostics
  " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
  nmap <silent><nowait> [g <Plug>(coc-diagnostic-prev)
  nmap <silent><nowait> ]g <Plug>(coc-diagnostic-next)

  " GoTo code navigation
  nmap <silent><nowait> gd <Plug>(coc-definition)
  nmap <silent><nowait> gy <Plug>(coc-type-definition)
  nmap <silent><nowait> gi <Plug>(coc-implementation)
  nmap <silent><nowait> gr <Plug>(coc-references)

  " Use K to show documentation in preview window
  nnoremap <silent> K :call ShowDocumentation()<CR>

  function! ShowDocumentation()
    if CocAction('hasProvider', 'hover')
      call CocActionAsync('doHover')
    else
      call feedkeys('K', 'in')
    endif
  endfunction

  " Highlight the symbol and its references when holding the cursor
  autocmd CursorHold * silent call CocActionAsync('highlight')

  " Symbol renaming
  nmap <leader>rn <Plug>(coc-rename)

  " Formatting selected code
  xmap <leader>f  <Plug>(coc-format-selected)
  nmap <leader>f  <Plug>(coc-format-selected)

  augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s)
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  augroup end

  " Applying code actions to the selected code block
  " Example: `<leader>aap` for current paragraph
  xmap <leader>a  <Plug>(coc-codeaction-selected)
  nmap <leader>a  <Plug>(coc-codeaction-selected)

  " Remap keys for applying code actions at the cursor position
  nmap <leader>ac  <Plug>(coc-codeaction-cursor)
  " Remap keys for apply code actions affect whole buffer
  nmap <leader>as  <Plug>(coc-codeaction-source)
  " Apply the most preferred quickfix action to fix diagnostic on the current line
  nmap <leader>qf  <Plug>(coc-fix-current)

  " Remap keys for applying refactor code actions
  nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
  xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
  nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)

  " Run the Code Lens action on the current line
  nmap <leader>cl  <Plug>(coc-codelens-action)

  " Map function and class text objects
  " NOTE: Requires 'textDocument.documentSymbol' support from the language server
  xmap if <Plug>(coc-funcobj-i)
  omap if <Plug>(coc-funcobj-i)
  xmap af <Plug>(coc-funcobj-a)
  omap af <Plug>(coc-funcobj-a)
  xmap ic <Plug>(coc-classobj-i)
  omap ic <Plug>(coc-classobj-i)
  xmap ac <Plug>(coc-classobj-a)
  omap ac <Plug>(coc-classobj-a)

  " Remap <C-f> and <C-b> to scroll float windows/popups
  if has('nvim-0.4.0') || has('patch-8.2.0750')
    nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
    inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
    vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  endif

  " Use CTRL-S for selections ranges
  " Requires 'textDocument/selectionRange' support of language server
  nmap <silent> <C-s> <Plug>(coc-range-select)
  xmap <silent> <C-s> <Plug>(coc-range-select)

  " Add `:Format` command to format current buffer
  command! -nargs=0 Format :call CocActionAsync('format')

  " Add `:Fold` command to fold current buffer
  command! -nargs=? Fold :call     CocAction('fold', <f-args>)

  " Add `:OR` command for organize imports of the current buffer
  command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

  " Mappings for CoCList
  " Show all diagnostics
  nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
  " Manage extensions
  nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
  " Show commands
  nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
  " Find symbol of current document
  nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
  " Search workspace symbols
  nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
  " Do default action for next item
  nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
  " Do default action for previous item
  nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
  " Resume latest coc list
  nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

  " Jump to previously visited location
  nnoremap <C-l> <C-i>
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
  nmap gx <Plug>(openbrowser-smart-search)
  vmap gx <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
  let g:vim_markdown_folding_disabled = 1
'''

[[plugins]]
repo = 'previm/previm'
hook_add = '''
  let g:previm_show_header = 0
  let g:previm_open_cmd = 'open -a "Google Chrome"'
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_start_level = 2
  let g:indent_guides_guide_size = 1
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = "tpope/vim-fugitive"

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = 'python'

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
hook_add = '''
  let g:table_mode_corner = '|'
'''

[[plugins]] # Set the buffer filetype based on the code block the cursor currently resides in
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]] # Find fenced code blocks and their filetype
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo    = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']
hook_add = '''
  set laststatus=3
  let g:airline_theme = 'tomorrow'
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#formatter = 'unique_tail'
  let g:airline#extensions#hunks#enabled = 0
  let g:airline_highlighting_cache = 1
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
depends = ['plenary.nvim']
lua_add = '''
require('telescope').setup({
  pickers = {
    find_files = {
      find_command = {'rg', '--files', '--hidden', '-g', '!.git'},
    },
    live_grep = {
      additional_args = {'--fixed-strings'},
    },
  },
})
local builtin = require('telescope.builtin')
vim.keymap.set('n', '<leader>ff', builtin.find_files, { desc = 'Telescope find files' })
vim.keymap.set('n', '<leader>fg', builtin.live_grep, { desc = 'Telescope live grep' })
vim.keymap.set('n', '<leader>fb', builtin.buffers, { desc = 'Telescope buffers' })
vim.keymap.set('n', '<leader>fh', builtin.help_tags, { desc = 'Telescope help tags' })
'''

[[plugins]]
repo = 'airblade/vim-rooter'
hook_add = '''
  let g:rooter_patterns = ['.git']
'''

[[plugins]]
repo = 'rhysd/clever-f.vim'

# Fix clipboard=unnamed issue (https://github.com/neovim/neovim/issues/1822)
[[plugins]]
repo = 'lambdalisue/pastefix.vim'

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'

[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
  let g:winresizer_start_key = '<C-T>'
'''

[[plugins]]
repo = 'wesQ3/vim-windowswap'

[[plugins]]
repo = 'thinca/vim-visualstar'

[[plugins]]
repo = 'zbirenbaum/copilot.lua'
on_cmd = ['Copilot']
on_event = ['InsertEnter']
lua_add = '''
require('copilot').setup({
  suggestion = {
    auto_trigger = true,
    keymap = {
      accept = '<Tab>',
      next = '<C-j>',
      prev = '<C-k>',
    },
  },
  filetypes = {
    yaml = true,
    markdown = true,
    gitcommit = true,
  },
})
'''

[[plugins]]
repo = 'CopilotC-Nvim/CopilotChat.nvim'
depends = ['copilot.lua', 'plenary.nvim']
branch = 'main'
lua_add = '''
require('CopilotChat').setup({
  model = 'claude-sonnet-4',
  agent = 'copilot',
  debug = false,
  -- Inline chat
  window = {
    layout = 'float',
    relative = 'cursor',
    width = 0.8,
    height = 0.4,
    row = 1
  },
  auto_insert_mode = false,
  question_header = '👤 ',
  answer_header = '🤖 ',
  error_header = '❌ ',
  prompts = {
    CommitStaged = {
      prompt = 'Generate a concise and meaningful commit message title based on the changes made. Make sure the title has maximum 50 characters. Do not put quotes around the title. Focus solely on creating the title, not the full commit message body.',
    },
  }
})
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
hook_add = '''
  autocmd TermOpen * :DisableWhitespace
'''

[[plugins]]
repo = 'MunifTanjim/nui.nvim'

[[plugins]]
repo = 'rcarriga/nvim-notify'
lua_add = '''
require('notify').setup({
  render = 'wrapped-compact',
  max_width = 60,
  stages = 'slide',
})
'''

[[plugins]]
repo = 'folke/noice.nvim'
depends = ['nui.nvim', 'nvim-notify']
lua_add = '''
require('noice').setup({
  presets = {
    command_palette = true,
  },
  routes = {
    {
      filter = {
        event = 'msg_show',
        kind = '',
        find = 'written',
      },
      opts = { skip = true },
    },
  },
})
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
if = 'has("nvim")'
hook_post_update = 'TSUpdate'
lua_source = '''
require('nvim-treesitter.configs').setup({
  ensure_installed = {
    'java',
    'php',
    'python',
    'javascript',
    'typescript',
    'json',
    'yaml',
    'toml',
    'lua',
    'vim',
    'vimdoc',
    'markdown',
    'diff',
  },
  highlight = {
    enable = true,
    disable = {},
  },
})
'''

[[plugins]]
repo = 'mfussenegger/nvim-dap'

[[plugins]]
repo = 'nvim-neotest/nvim-nio'

[[plugins]]
repo = 'rcarriga/nvim-dap-ui'
depends = ['nvim-dap', 'nvim-nio']
lua_source = '''
-- Configure layout
require('dapui').setup({
  layouts = {
    {
      elements = {
        { id = 'watches', size = 0.20 },
        { id = 'stacks', size = 0.20 },
        { id = 'breakpoints', size = 0.20 },
        { id = 'scopes', size = 0.40 }
      },
      position = 'right',
      size = 40
    },
    {
      elements = {
        { id = 'console', size = 0.5 },
        { id = 'repl', size = 0.5 }
      },
      position = 'bottom',
      size = 10
    }
  },
})
-- Open and close the windows automatically
local dap, dapui = require('dap'), require('dapui')
dap.listeners.before.attach.dapui_config = function()
  dapui.open()
end
dap.listeners.before.launch.dapui_config = function()
  dapui.open()
end
dap.listeners.before.event_terminated.dapui_config = function()
  dapui.close()
end
dap.listeners.before.event_exited.dapui_config = function()
  dapui.close()
end
'''

[[plugins]]
repo = 'theHamsta/nvim-dap-virtual-text'
depends = ['nvim-dap', 'nvim-treesitter']
lua_source = '''
require('nvim-dap-virtual-text').setup()
'''

[[plugins]]
repo = 'mfussenegger/nvim-dap-python'
depends = ['nvim-dap']
lua_add = '''
require('dap-python').setup('python')
-- Set up remote python debugging
table.insert(require('dap').configurations.python, {
  type = 'python',
  request = 'attach',
  name = 'Remote Python Debugger',
  port = 5678,
  host = '127.0.0.1',
  mode = 'remote',
  cwd = vim.fn.getcwd(),
  pathMappings = {
    {
      localRoot = function()
        return vim.fn.input('Local directory > ', vim.fn.getcwd() .. '/backend', 'file')
      end,
      remoteRoot = function()
        return vim.fn.input('Container directory > ', '/app', 'file')
      end,
    },
  },
})

-- See :help dap-mappings
vim.keymap.set('n', '<F5>', function() require('dap').continue() end)
vim.keymap.set('n', '<F6>', function() require('dap').step_over() end)
vim.keymap.set('n', '<F7>', function() require('dap').step_into() end)
vim.keymap.set('n', '<F8>', function() require('dap').step_out() end)
vim.keymap.set('n', '<Leader>b', function() require('dap').toggle_breakpoint() end)
vim.keymap.set('n', '<Leader>B', function() require('dap').set_breakpoint() end)
vim.keymap.set('n', '<Leader>lp', function() require('dap').set_breakpoint(nil, nil, vim.fn.input('Log point message: ')) end)
vim.keymap.set('n', '<Leader>dr', function() require('dap').repl.open() end)
vim.keymap.set('n', '<Leader>dl', function() require('dap').run_last() end)
vim.keymap.set({'n', 'v'}, '<Leader>dh', function()
  require('dap.ui.widgets').hover()
end)
vim.keymap.set({'n', 'v'}, '<Leader>dp', function()
  require('dap.ui.widgets').preview()
end)
vim.keymap.set('n', '<Leader>df', function()
  local widgets = require('dap.ui.widgets')
  widgets.centered_float(widgets.frames)
end)
vim.keymap.set('n', '<Leader>ds', function()
  local widgets = require('dap.ui.widgets')
  widgets.centered_float(widgets.scopes)
end)
'''

[[plugins]]
repo = 'stevearc/dressing.nvim'

[[plugins]]
repo = 'MeanderingProgrammer/render-markdown.nvim'
on_ft = ['Avante']
lua_add = '''
require('render-markdown').setup({
  file_types = {
    'Avante',
  },
})
'''

[[plugins]]
repo = 'nvim-tree/nvim-web-devicons'

[[plugins]]
repo = 'yetone/avante.nvim'
depends = [
  'nvim-treesitter',
  'dressing.nvim',
  'plenary.nvim',
  'nui.nvim',
  'render-markdown.nvim',
  'nvim-web-devicons',
  'copilot.lua',
]
branch = 'main'
build = 'make'
on_source = ['avante.nvim']
lua_source = '''
require('avante').setup({
  provider = 'copilot',
  copilot = {
    model = 'claude-sonnet-4',
  },
  mappings = {
    sidebar = {
      close = {},
    },
  },
  windows = {
    width = 50,
    sidebar_header = {
      rounded = false,
    }
  }
})
'''
