[[plugins]]
repo = 'morhetz/gruvbox'
hook_add = '''
  colorscheme gruvbox
  set background=dark
  set t_Co=256
  let g:ligthline = { 'colorscheme': 'gruvbox' }
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  let NERDTreeShowHidden = 1
  let g:NERDTreeWinSize = 28
  nnoremap <silent><C-e> :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
on_i = 1
merged = '0'
hook_add = '''
  set updatetime=100
  let g:coc_global_extensions = [
      \'coc-css',
      \'coc-eslint',
      \'coc-go',
      \'coc-html',
      \'coc-java',
      \'coc-json',
      \'coc-pairs',
      \'coc-phpls',
      \'coc-pyright',
      \'coc-tsserver',
      \'coc-prettier',
      \'coc-yaml',
      \'coc-highlight'
      \]

  " Don't pass messages to |ins-completion-menu|.
  set shortmess+=c

  " Always show the signcolumn, otherwise it would shift the text each time
  " diagnostics appear/become resolved.
  if has("patch-8.1.1564")
    " Recently vim can merge signcolumn and number column into one
    set signcolumn=number
  else
    set signcolumn=yes
  endif

  " Use tab for trigger completion with characters ahead and navigate.
  " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
  " other plugin before putting this into your config.
  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  " Use <c-space> to trigger completion.
  inoremap <silent><expr> <c-space> coc#refresh()

  " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
  " position. Coc only does snippet and additional edit on confirm.
  " <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
  if exists('*complete_info')
    inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
  else
    inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
  endif

  " Use `[g` and `]g` to navigate diagnostics
  " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)

  " GoTo code navigation.
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  " Use K to show documentation in preview window.
  nnoremap <silent> K :call <SID>show_documentation()<CR>

  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction

  " Highlight the symbol and its references when holding the cursor.
  autocmd CursorHold * silent call CocActionAsync('highlight')

  " Symbol renaming.
  nmap <leader>rn <Plug>(coc-rename)

  " Formatting selected code.
  xmap <leader>f  <Plug>(coc-format-selected)
  nmap <leader>f  <Plug>(coc-format-selected)

  augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder.
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  augroup end

  " Applying codeAction to the selected region.
  " Example: `<leader>aap` for current paragraph
  xmap <leader>a  <Plug>(coc-codeaction-selected)
  nmap <leader>a  <Plug>(coc-codeaction-selected)

  " Remap keys for applying codeAction to the current buffer.
  nmap <leader>ac  <Plug>(coc-codeaction)
  " Apply AutoFix to problem on the current line.
  nmap <leader>qf  <Plug>(coc-fix-current)

  " Map function and class text objects
  " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
  xmap if <Plug>(coc-funcobj-i)
  omap if <Plug>(coc-funcobj-i)
  xmap af <Plug>(coc-funcobj-a)
  omap af <Plug>(coc-funcobj-a)
  xmap ic <Plug>(coc-classobj-i)
  omap ic <Plug>(coc-classobj-i)
  xmap ac <Plug>(coc-classobj-a)
  omap ac <Plug>(coc-classobj-a)

  " Use CTRL-S for selections ranges.
  " Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
  nmap <silent> <C-s> <Plug>(coc-range-select)
  xmap <silent> <C-s> <Plug>(coc-range-select)

  " Add `:Format` command to format current buffer.
  command! -nargs=0 Format :call CocAction('format')

  " Add `:Fold` command to fold current buffer.
  command! -nargs=? Fold :call     CocAction('fold', <f-args>)

  " Add `:OR` command for organize imports of the current buffer.
  command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

  " Mappings for CoCList
  "" Show all diagnostics.
  nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
  "" Manage extensions.
  nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
  "" Show commands.
  nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
  "" Find symbol of current document.
  nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
  "" Search workspace symbols.
  nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
  "" Do default action for next item.
  nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
  "" Do default action for previous item.
  nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
  "" Resume latest coc list.
  nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

  " Jump to previously visited location
  nnoremap <C-l> <C-i>
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
  nmap gx <Plug>(openbrowser-smart-search)
  vmap gx <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
  let g:vim_markdown_folding_disabled = 1
'''

[[plugins]]
repo = 'previm/previm'
hook_add = '''
  let g:previm_show_header = 0
  let g:previm_open_cmd = 'open -a "Google Chrome"'
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_start_level = 2
  let g:indent_guides_guide_size = 1
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = "tpope/vim-fugitive"

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = 'python'

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
hook_add = '''
  let g:table_mode_corner = '|'
'''

[[plugins]] # Set the buffer filetype based on the code block the cursor currently resides in
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]] # Find fenced code blocks and their filetype
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo    = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']
hook_add = '''
  set laststatus=2
  let g:airline_theme = 'tomorrow'
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#formatter = 'unique_tail'
  let g:airline#extensions#hunks#enabled = 0
  let g:airline_highlighting_cache = 1
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
depends = ['plenary.nvim']
hook_add = '''
  nnoremap <leader>ff <cmd>lua require('telescope.builtin').find_files()<cr>
  nnoremap <leader>fg <cmd>lua require('telescope.builtin').live_grep()<cr>
  nnoremap <leader>fb <cmd>lua require('telescope.builtin').buffers()<cr>
  nnoremap <leader>fh <cmd>lua require('telescope.builtin').help_tags()<cr>
'''

[[plugins]]
repo = 'airblade/vim-rooter'
hook_add = '''
  let g:rooter_patterns = ['.git']
'''

[[plugins]]
repo = 'rhysd/clever-f.vim'

# Fix clipboard=unnamed issue (https://github.com/neovim/neovim/issues/1822)
[[plugins]]
repo = 'lambdalisue/pastefix.vim'

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'

[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
  let g:winresizer_start_key = '<C-T>'
'''

[[plugins]]
repo = 'wesQ3/vim-windowswap'

[[plugins]]
repo = 'thinca/vim-visualstar'

[[plugins]]
repo = 'github/copilot.vim'
hook_add = '''
  let g:copilot_filetypes = {
      \ 'gitcommit': v:true,
      \ 'markdown': v:true,
      \ 'yaml': v:true,
      \ 'TelescopeResults': v:false,
      \ 'TelescopePrompt': v:false
      \ }

  "Keybindings
  inoremap <silent> <C-j> <Plug>(copilot-next)
  inoremap <silent> <C-k> <Plug>(copilot-previous)
'''

[[plugins]]
repo = 'CopilotC-Nvim/CopilotChat.nvim'
depends = ['copilot.vim', 'plenary.nvim']
rev = 'canary'
hook_add = '''
lua <<EOF
require("CopilotChat").setup {
  debug = false,
  -- Inline chat
  window = {
    layout = 'float',
    relative = 'cursor',
    width = 1,
    height = 0.4,
    row = 1
  },
  prompts = {
    CommitStaged = {
      prompt = 'Generate a concise and meaningful commit message title based on the changes made. Make sure the title has maximum 50 characters. Do not put quotes around the title. Focus solely on creating the title, not the full commit message body.',
    },
  }
}
EOF
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
hook_add = '''
  autocmd TermOpen * :DisableWhitespace
'''

[[plugins]]
repo = 'MunifTanjim/nui.nvim'

[[plugins]]
repo = 'rcarriga/nvim-notify'
hook_add = '''
lua <<EOF
require'notify'.setup {
  render = 'wrapped-compact',
  max_width = 60,
  stages = 'slide',
}
EOF
'''

[[plugins]]
repo = 'folke/noice.nvim'
depends = ['nui.nvim', 'nvim-notify']
hook_add = '''
lua <<EOF
require'noice'.setup {
  presets = {
    command_palette = true,
  },
  routes = {
    {
      filter = {
        event = "msg_show",
        kind = "",
        find = "written",
      },
      opts = { skip = true },
    },
  },
}
EOF
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
if = 'has("nvim")'
hook_post_update = 'TSUpdate'
hook_source = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = {
    'java',
    'php',
    'python',
    'javascript',
    'typescript',
    'json',
    'yaml',
    'toml',
    'lua',
    'vim',
    'vimdoc',
    'markdown',
  },
  highlight = {
    enable = true,
    disable = {},
  },
}
EOF
'''
